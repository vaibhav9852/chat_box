// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid())
  name      String
  email     String    @unique 
  password  String // Hashed password
  avatar    String? // Profile picture URL
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  messages  Message[] @relation("SentMessages") // Messages sent by this user
  received  Message[] @relation("DirectMessages") // Messages received by this user
  groups    Group[]   @relation("GroupMembers") // Groups the user is a part of
  Group     Group[]
}

model Group {
  id          String    @id @default(uuid())
  name        String // Group name
  description String? // Optional description
  adminId     String // Group admin ID
  admin       User      @relation(fields: [adminId], references: [id])
  members     User[]    @relation("GroupMembers")
  messages    Message[] // Messages sent in the group
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Message {
  id          String   @id @default(uuid())
  content     String? 
  fileUrl     String? // URL for multimedia (image, video, audio)
  fileType    String? // MIME type of the file
  senderId    String 
  sender      User     @relation("SentMessages", fields: [senderId], references: [id])
  recipientId String? // Optional recipient ID for one-to-one messages
  recipient   User?    @relation("DirectMessages", fields: [recipientId], references: [id])
  groupId     String? // Optional group ID for group messages
  group       Group?   @relation(fields: [groupId], references: [id])
  createdAt   DateTime @default(now())
}

// one to one 

// model User {
//   id      Int      @id @default(autoincrement())
//   profile Profile?
// }

// model Profile {
//   id     Int  @id @default(autoincrement())
//   user   User @relation(fields: [userId], references: [id])
//   userId Int  @unique // relation scalar field (used in the `@relation` attribute above)
// }

// one to many 

// model Userk {
//   id    Int    @id @default(autoincrement())
//   posts Post[]
// }

// model Post {
//   id       Int  @id @default(autoincrement())
//   author   Userk @relation(fields: [authorId], references: [id])
//   authorId Int 
// }

// 
