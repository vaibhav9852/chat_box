// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String    @id @default(uuid())
  name       String
  email      String    @unique
  password   String    
  avatar     String?   
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  messages   Message[] // Relation to messages sent by the user
  groups     Group[]   @relation("GroupMembers")
  groupChats Group[]   @relation("GroupAdmins")
}

model Group {
  id         String    @id @default(uuid())
  name       String     
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  adminId    String 
  admin      User      @relation("GroupAdmins", fields: [adminId], references: [id])
  members    User[]    @relation("GroupMembers")
  messages   Message[] // Relation to group messages
}

model Message {
  id        String    @id @default(uuid())
  content   String?   
  senderId  String   
  sender    User      @relation(fields: [senderId], references: [id])
  groupId   String?   
  group     Group?    @relation(fields: [groupId], references: [id])
  fileUrl   String?   
  fileType  String?   // MIME type (e.g., image/jpeg, video/mp4) for media files
  createdAt DateTime  @default(now())
}


// one to one 

// model User {
//   id      Int      @id @default(autoincrement())
//   profile Profile?
// }

// model Profile {
//   id     Int  @id @default(autoincrement())
//   user   User @relation(fields: [userId], references: [id])
//   userId Int  @unique // relation scalar field (used in the `@relation` attribute above)
// }




// one to many 

// model Userk {
//   id    Int    @id @default(autoincrement())
//   posts Post[]
// }

// model Post {
//   id       Int  @id @default(autoincrement())
//   author   Userk @relation(fields: [authorId], references: [id])
//   authorId Int 
// }

// 